function [cali lmin lmax] = upgrade_limits(fnc, minboxw, maxboxw, cali, lmin0, lmax0, scali)% Improve limits for all grades with a maximun of non-conforming% boxes of fnc% fnc = maximum non-conforming limit% cali = tomotoes grades% lmin0 = minimum tomatoe weight to pack total conforming boxes% lmin1 = maximum tomatoe weight to pack total confomaing boxes % scali = maximum width of caliber% Determine calibers with enough productionN = 5000000;NC = length(cali);% Check possible calibers for packingM = tomatornd(N, 1);f0 = zeros(NC,1);rcali = true(NC,1);for i = 1:NC  f0(i) = sum(M >= lmin0(i) & M < lmax0(i))/N;  if (f0(i) <= 0.01)    display(["Not enough production for caliber ", num2str(cali(i))]);    display(["Removing caliber ", num2str(cali(i))]);    rcali(i) = false;  endifendfor% Optimize limitslmin = lmin0;lmax = lmax0;NC = length(cali);do  % Find the increase of non-conforming for all grades  p = dfnonconform(minboxw, cali, rcali, lmin, lmax);  [pmin I] = min(p);  if (lmax(NC) - lmin(NC) > scali(NC))    p(NC) = 1;    [pmin I] = min(p);  endif  while (I < NC && (lmax(I+1) - lmin(I+1) <= 10 || lmax(I) - lmin(I) > scali(I)))    p(I) = 1;    [pmin I] = min(p);  endwhile  display(["Modify grade ", num2str(cali(I))]);  lmin(I) = lmin(I) - 1;  if (I < NC)    lmax(I+1) = lmin(I);  endif  % Find the non-conforming fraction for the new limits  p = fnonconforming(minboxw, maxboxw, cali, lmin, lmax);until (max(p(rcali)) > fnc)% Undo the last decrement to go back to optimumlmin(I) = lmin(I) + 1;if (I < NC)  lmax(I+1) = lmin(I) ;endifendfunction